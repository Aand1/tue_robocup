ROR] [WallTime: 1437310729.148516] No entities found in EdEntityDesignator(robot, type=, center_point=x: 10.535 y: -8.15 z: 0.0, radius=2.0, id=, parse=True, criteriafuncs=["def is_large_enough(entity):\n            if len(entity.convex_hull) < 3:\n                return False\n\n            chull = [entity.convex_hull[-1]] + entity.convex_hull + [entity.convex_hull[0]]\n            area = 0\n            for ppt, pt, npt in zip(chull, chull[1:], chull[2:]):\n                area += pt.x*( npt.y - ppt.y );\n            area /= 2\n\n            return area > knowledge.find_person['min_chull_area']",
 "def probably_exists(entity):\n            return entity.existence_probability > knowledge.find_person['min_exist_prob']",
 "def is_just_above_bed(entity):\n            bed = robot.ed.get_entity(knowledge.bed)\n\n            # Check if top of found object is above a certain threshold above the bed\n            if entity.pose.position.z + entity.z_max < bed.pose.position.z + knowledge.matress_height + knowledge.find_person['under_z']:\n                return False\n\n            # Check if center point of entity is within chull of bed\n            bed_chull = bed.convex_hull\n            bed_chull = bed_chull + [bed_chull[0]]\n\n            for i in range(len(bed_chull)-1):\n                dx = bed_chull[i+1].x - bed_chull[i].x\n                dy = bed_chull[i+1].y - bed_chull[i].y\n\n                dxe = -bed_chull[i].x\n                dye = -bed_chull[i].y\n\n                # Cross product of these two gives either positive or negative, if one is negative, point is outside the chull\n                if dx*dye-dy*dxe < 0:\n                    return False\n\n            return True",
 'def is_not_bed(entity):\n            return entity.id != knowledge.bed',
 "def is_not_prior(entity):\n            return entity.type == '' or entity.type == 'human'"])
[INFO] [WallTime: 1437310729.370067] Criterium         def is_large_enough(entity):
            if len(entity.convex_hull) < 3:
                return False

            chull = [entity.convex_hull[-1]] + entity.convex_hull + [entity.convex_hull[0]]
            area = 0
            for ppt, pt, npt in zip(chull, chull[1:], chull[2:]):
                area += pt.x*( npt.y - ppt.y );
            area /= 2

            return area > knowledge.find_person['min_chull_area']
 leaves 4 entities
[INFO] [WallTime: 1437310729.370623] Criterium         def probably_exists(entity):
            return entity.existence_probability > knowledge.find_person['min_exist_prob']
 leaves 4 entities
[INFO] [WallTime: 1437310729.421057] Criterium         def is_just_above_bed(entity):
            bed = robot.ed.get_entity(knowledge.bed)

            # Check if top of found object is above a certain threshold above the bed
            if entity.pose.position.z + entity.z_max < bed.pose.position.z + knowledge.matress_height + knowledge.find_person['under_z']:
                return False

            # Check if center point of entity is within chull of bed
            bed_chull = bed.convex_hull
            bed_chull = bed_chull + [bed_chull[0]]

            for i in range(len(bed_chull)-1):
                dx = bed_chull[i+1].x - bed_chull[i].x
                dy = bed_chull[i+1].y - bed_chull[i].y

                dxe = -bed_chull[i].x
                dye = -bed_chull[i].y

                # Cross product of these two gives either positive or negative, if one is negative, point is outside the chull
                if dx*dye-dy*dxe < 0:
                    return False

            return True
 leaves 1 entities
[INFO] [WallTime: 1437310729.421560] Criterium         def is_not_bed(entity):
            return entity.id != knowledge.bed
 leaves 0 entities
[INFO] [WallTime: 1437310729.421940] Criterium         def is_not_prior(entity):
            return entity.type == '' or entity.type == 'human'
 leaves 0 entities
[ERROR] [WallTime: 1437310729.424148] No entities found in EdEntityDesignator(robot, type=, center_point=x: 10.535 y: -8.15 z: 0.0, radius=2.0, id=, parse=True, criteriafuncs=["def is_large_enough(entity):\n            if len(entity.convex_hull) < 3:\n                return False\n\n            chull = [entity.convex_hull[-1]] + entity.convex_hull + [entity.convex_hull[0]]\n            area = 0\n            for ppt, pt, npt in zip(chull, chull[1:], chull[2:]):\n                area += pt.x*( npt.y - ppt.y );\n            area /= 2\n\n            return area > knowledge.find_person['min_chull_area']",
 "def probably_exists(entity):\n            return entity.existence_probability > knowledge.find_person['min_exist_prob']",
 "def is_just_above_bed(entity):\n            bed = robot.ed.get_entity(knowledge.bed)\n\n            # Check if top of found object is above a certain threshold above the bed\n            if entity.pose.position.z + entity.z_max < bed.pose.position.z + knowledge.matress_height + knowledge.find_person['under_z']:\n                return False\n\n            # Check if center point of entity is within chull of bed\n            bed_chull = bed.convex_hull\n            bed_chull = bed_chull + [bed_chull[0]]\n\n            for i in range(len(bed_chull)-1):\n                dx = bed_chull[i+1].x - bed_chull[i].x\n                dy = bed_chull[i+1].y - bed_chull[i].y\n\n                dxe = -bed_chull[i].x\n                dye = -bed_chull[i].y\n\n                # Cross product of these two gives either positive or negative, if one is negative, point is outside the chull\n                if dx*dye-dy*dxe < 0:\n                    return False\n\n            return True",
 'def is_not_bed(entity):\n            return entity.id != knowledge.bed',
 "def is_not_prior(entity):\n            return entity.type == '' or entity.type == 'human'"])
[INFO] [WallTime: 1437310729.645159] Criterium         def is_large_enough(entity):
            if len(entity.convex_hull) < 3:
                return False

            chull = [entity.convex_hull[-1]] + entity.convex_hull + [entity.convex_hull[0]]
            area = 0
            for ppt, pt, npt in zip(chull, chull[1:], chull[2:]):
                area += pt.x*( npt.y - ppt.y );
            area /= 2

            return area > knowledge.find_person['min_chull_area']
 leaves 4 entities
[INFO] [WallTime: 1437310729.645783] Criterium         def probably_exists(entity):
            return entity.existence_probability > knowledge.find_person['min_exist_prob']
 leaves 4 entities
[INFO] [WallTime: 1437310729.691614] Criterium         def is_just_above_bed(entity):
            bed = robot.ed.get_entity(knowledge.bed)

            # Check if top of found object is above a certain threshold above the bed
            if entity.pose.position.z + entity.z_max < bed.pose.position.z + knowledge.matress_height + knowledge.find_person['under_z']:
                return False

            # Check if center point of entity is within chull of bed
            bed_chull = bed.convex_hull
            bed_chull = bed_chull + [bed_chull[0]]

            for i in range(len(bed_chull)-1):
                dx = bed_chull[i+1].x - bed_chull[i].x
                dy = bed_chull[i+1].y - bed_chull[i].y

                dxe = -bed_chull[i].x
                dye = -bed_chull[i].y

                # Cross product of these two gives either positive or negative, if one is negative, point is outside the chull
                if dx*dye-dy*dxe < 0:
                    return False

            return True
 leaves 2 entities
[INFO] [WallTime: 1437310729.692116] Criterium         def is_not_bed(entity):
            return entity.id != knowledge.bed
 leaves 1 entities
[INFO] [WallTime: 1437310729.692624] Criterium         def is_not_prior(entity):
            return entity.type == '' or entity.type == 'human'
 leaves 1 entities
[INFO] [WallTime: 1437310729.692937] choosing best entity from this list (name->weight):
    [('d442979bf27ed9626e73637bbe94db0b', 0)]
[INFO] [WallTime: 1437310729.753645] State machine transitioning 'LOOK_IF_AWAKE':'there'-->'SAY_AWAKE'
[INFO] [WallTime: 1437310729.754282] 'Finally, you're awake, I will hand you your newspaper now'
[INFO] [WallTime: 1437310733.856762] State machine transitioning 'SAY_AWAKE':'spoken'-->'HANDOVER_NEWSPAPER'
[INFO] [WallTime: 1437310733.857446] State machine starting in initial state 'LOCK_ARM' with userdata: 
    []
[INFO] [WallTime: 1437310733.857803] LockingDesignator(<robot_smach_states.util.designators.designator.ArmDesignator object at 0x7faeee2d3d10>) resolved to <robot_ski, but is *not locked* to it
[INFO] [WallTime: 1437310733.858106] LockingDesignator(LockingDesignator(<robot_smach_states.util.designators.designator.ArmDesignator object at 0x7faeee2d3d10>)) locked to <robot_ski
[INFO] [WallTime: 1437310733.858387] locking_designator LockingDesignator(LockingDesignator(<robot_smach_states.util.designators.designator.ArmDesignator object at 0x7faeee2d3d10>)) is now locked to <robot_ski
[INFO] [WallTime: 1437310733.858607] State machine transitioning 'LOCK_ARM':'locked'-->'SPINDLE_MEDIUM'
[INFO] [WallTime: 1437310733.859189] State machine transitioning 'SPINDLE_MEDIUM':'done'-->'MOVE_HUMAN_HANDOVER_JOINT_GOAL'
[INFO] [WallTime: 1437310736.680536] State machine transitioning 'MOVE_HUMAN_HANDOVER_JOINT_GOAL':'succeeded'-->'SAY_OPEN_GRIPPER'
[INFO] [WallTime: 1437310736.681118] 'Watch out, I will open my gripper in one second. Please take it from me.'
[INFO] [WallTime: 1437310741.933344] State machine transitioning 'SAY_OPEN_GRIPPER':'spoken'-->'OPEN_GRIPPER_HANDOVER'
[INFO] [WallTime: 1437310741.934065] State machine transitioning 'OPEN_GRIPPER_HANDOVER':'succeeded'-->'SAY_CLOSE_NOW_GRIPPER'
[INFO] [WallTime: 1437310741.934562] 'I will close my gripper now'
[INFO] [WallTime: 1437310744.107485] State machine transitioning 'SAY_CLOSE_NOW_GRIPPER':'spoken'-->'CLOSE_GRIPPER_HANDOVER'
[INFO] [WallTime: 1437310744.108266] State machine transitioning 'CLOSE_GRIPPER_HANDOVER':'succeeded'-->'RESET_ARM'
[INFO] [WallTime: 1437310746.921994] State machine transitioning 'RESET_ARM':'succeeded'-->'RESET_TORSO'
[INFO] [WallTime: 1437310746.922798] State machine transitioning 'RESET_TORSO':'done'-->'UNLOCK_ARM'
[INFO] [WallTime: 1437310746.923283] locking_designator LockingDesignator(LockingDesignator(<robot_smach_states.util.designators.designator.ArmDesignator object at 0x7faeee2d3d10>)) is going to unlock from <robot_ski
[INFO] [WallTime: 1437310746.923531] State machine terminating 'UNLOCK_ARM':'unlocked':'succeeded'
[INFO] [WallTime: 1437310746.923774] State machine terminating 'HANDOVER_NEWSPAPER':'succeeded':'container_succeeded'
[INFO] [WallTime: 1437310746.924010] State machine transitioning 'WAKEUP_CONTAINER':'container_succeeded'-->'CANCEL_HEAD_GOALS_1'
[WAKE ME UP] CancelHeadGoals
[INFO] [WallTime: 1437310746.925206] State machine transitioning 'CANCEL_HEAD_GOALS_1':'done'-->'TAKE_ORDER_CONTAINER'
[INFO] [WallTime: 1437310746.925787] State machine starting in initial state 'COUNTER' with userdata: 
    []
[INFO] [WallTime: 1437310746.926092] State machine transitioning 'COUNTER':'counted'-->'SAY_WHAT_BREAKFAST'
[INFO] [WallTime: 1437310746.926510] 'What do you want to eat?'
[INFO] [WallTime: 1437310748.457731] State machine transitioning 'SAY_WHAT_BREAKFAST':'spoken'-->'GET_ORDER'
[WAKE ME UP] GetOrder
[WAKE ME UP] KeyError resolving: 'item3'
[WAKE ME UP] KeyError resolving: 'preposition'
[WAKE ME UP] What was heard: a     
[WAKE ME UP] Could not get a match with word_item1 = 
[WAKE ME UP] Could not get a match with word_item2 = 
[WAKE ME UP] Response: fruit = , cereal =  , milk = pure_milk
[WAKE ME UP] One of the food types was empty
[INFO] [WallTime: 1437310753.265803] State machine transitioning 'GET_ORDER':'failed'-->'SAY_INCORRECT_ORDER'
[INFO] [WallTime: 1437310753.266266] 'I missunderstood something,'
[INFO] [WallTime: 1437310753.268822] State machine transitioning 'SAY_INCORRECT_ORDER':'spoken'-->'COUNTER'
[INFO] [WallTime: 1437310753.269308] State machine transitioning 'COUNTER':'counted'-->'SAY_WHAT_BREAKFAST'
[INFO] [WallTime: 1437310753.269795] 'What do you want to eat?'
[INFO] [WallTime: 1437310756.715555] State machine transitioning 'SAY_WHAT_BREAKFAST':'spoken'-->'GET_ORDER'
[WAKE ME UP] GetOrder
[WAKE ME UP] KeyError resolving: 'beginning'
[WAKE ME UP] KeyError resolving: 'item3'
[WAKE ME UP] What was heard:  apple a pear a 
[WAKE ME UP] apple its a fruit!
[WAKE ME UP] First item fruit
[WAKE ME UP] Could not get a match with word_item2 = pear
[WAKE ME UP] Response: fruit = apple, cereal =  , milk = pure_milk
[WAKE ME UP] One of the food types was empty
[INFO] [WallTime: 1437310766.368721] State machine transitioning 'GET_ORDER':'failed'-->'SAY_INCORRECT_ORDER'
[INFO] [WallTime: 1437310766.369346] 'I didn't get that.'
[INFO] [WallTime: 1437310766.371821] State machine transitioning 'SAY_INCORRECT_ORDER':'spoken'-->'COUNTER'
[INFO] [WallTime: 1437310766.372289] State machine transitioning 'COUNTER':'counted'-->'SAY_WHAT_BREAKFAST'
[INFO] [WallTime: 1437310766.372716] 'What do you want to eat?'
[INFO] [WallTime: 1437310769.536217] State machine transitioning 'SAY_WHAT_BREAKFAST':'spoken'-->'GET_ORDER'
[WAKE ME UP] GetOrder
[WAKE ME UP] KeyError resolving: 'item3'
[WAKE ME UP] KeyError resolving: 'preposition'
[WAKE ME UP] What was heard: a     
[WAKE ME UP] Could not get a match with word_item1 = 
[WAKE ME UP] Could not get a match with word_item2 = 
[WAKE ME UP] Response: fruit = , cereal =  , milk = pure_milk
[WAKE ME UP] One of the food types was empty
[INFO] [WallTime: 1437310773.479700] State machine transitioning 'GET_ORDER':'failed'-->'SAY_INCORRECT_ORDER'
[INFO] [WallTime: 1437310773.480385] 'I didn't get that.'
[INFO] [WallTime: 1437310773.483265] State machine transitioning 'SAY_INCORRECT_ORDER':'spoken'-->'COUNTER'
[INFO] [WallTime: 1437310773.483745] State machine transitioning 'COUNTER':'limit_reached'-->'SAY_ILL_CHOOSE_BREAKFAST'
[INFO] [WallTime: 1437310773.484201] 'I couldn't understand the breakfast order. I'll choose something for you.'
[INFO] [WallTime: 1437310773.486462] State machine transitioning 'SAY_ILL_CHOOSE_BREAKFAST':'spoken'-->'PICK_DEFAULT_ORDER'
[INFO] [WallTime: 1437310773.486892] State machine transitioning 'PICK_DEFAULT_ORDER':'done'-->'SAY_DEFAULT_ORDER'
[INFO] [WallTime: 1437310773.487319] 'I will bring you a lemon, egg stars and pure milk'
[INFO] [WallTime: 1437310782.969349] State machine terminating 'SAY_DEFAULT_ORDER':'spoken':'container_succeeded'
[INFO] [WallTime: 1437310782.969815] State machine transitioning 'TAKE_ORDER_CONTAINER':'container_succeeded'-->'GOTO_KITCHEN_CONTAINER'
[INFO] [WallTime: 1437310782.970285] State machine starting in initial state 'SAY_PREPARING' with userdata: 
    []
[INFO] [WallTime: 1437310782.970624] 'I'm going to the kitchen'
[INFO] [WallTime: 1437310782.973357] State machine transitioning 'SAY_PREPARING':'spoken'-->'GOTO_KITCHEN'
[INFO] [WallTime: 1437310782.973828] State machine starting in initial state 'START_ANALYSIS' with userdata: 
    []
[INFO] [WallTime: 1437310782.976666] State machine transitioning 'START_ANALYSIS':'done'-->'NAVIGATE'
[INFO] [WallTime: 1437310782.977101] State machine starting in initial state 'GET_PLAN' with userdata: 
    []
[INFO] [WallTime: 1437310783.093543] choosing best entity from this list (name->weight):
    [('kitchen', 0)]
[INFO] [WallTime: 1437310783.139542] choosing best entity from this list (name->weight):
    [('kitchen', 0)]
[INFO] [WallTime: 1437310783.164308] Goal handle = <actionlib.action_client.ClientGoalHandle instance at 0x7faeedcfc950>
[INFO] [WallTime: 1437310783.164781] 'I will go there right away!'
[INFO] [WallTime: 1437310783.167266] State machine transitioning 'GET_PLAN':'goal_ok'-->'EXECUTE_PLAN'
[INFO] [WallTime: 1437310797.180540] State machine transitioning 'EXECUTE_PLAN':'blocked'-->'PLAN_BLOCKED'
[INFO] [WallTime: 1437310797.181033] Plan blocked
[INFO] [WallTime: 1437310800.192743] Goal handle = <actionlib.action_client.ClientGoalHandle instance at 0x7faeedd14290>
[INFO] [WallTime: 1437310800.693879] State machine transitioning 'PLAN_BLOCKED':'free'-->'EXECUTE_PLAN'
[INFO] [WallTime: 1437310804.698235] State machine transitioning 'EXECUTE_PLAN':'blocked'-->'PLAN_BLOCKED'
[INFO] [WallTime: 1437310804.698733] Plan blocked
[WARN] [WallTime: 1437310807.704634] Plan free again
[INFO] [WallTime: 1437310807.705143] State machine transitioning 'PLAN_BLOCKED':'free'-->'EXECUTE_PLAN'
[INFO] [WallTime: 1437310815.713496] State machine terminating 'EXECUTE_PLAN':'succeeded':'arrived'
[INFO] [WallTime: 1437310815.713937] State machine transitioning 'NAVIGATE':'arrived'-->'STOP_ANALYSIS_SUCCEED'
[INFO] [WallTime: 1437310815.717653] 

Navigation summary:
Covered 10.4343838239 meters in 32.7408640385 seconds (0.31869604332) m/s avg.
Result = succeeded with 0 plans, 0 clears and 0 resets


[INFO] [WallTime: 1437310815.717997] State machine terminating 'STOP_ANALYSIS_SUCCEED':'done':'arrived'
[INFO] [WallTime: 1437310815.718272] State machine terminating 'GOTO_KITCHEN':'arrived':'container_succeeded'
[INFO] [WallTime: 1437310815.718522] State machine transitioning 'GOTO_KITCHEN_CONTAINER':'container_succeeded'-->'PREP_BREAKFAST_CONTAINER'
[INFO] [WallTime: 1437310815.718861] State machine starting in initial state 'SAY_PREPARING' with userdata: 
    []
[INFO] [WallTime: 1437310815.719178] 'I'm going to prepare your breakfast. La la la la la'
[INFO] [WallTime: 1437310815.721762] State machine transitioning 'SAY_PREPARING':'spoken'-->'SELECT_ITEM'
asked items: ['egg_stars', 'pure_milk', 'lemon']
category items: ['papaya_milk', 'pure_milk']
[INFO] [WallTime: 1437310815.722286] 'I will get your milk now.'
[INFO] [WallTime: 1437310815.725014] State machine transitioning 'SELECT_ITEM':'selected'-->'GOTO_ITEM'
[INFO] [WallTime: 1437310815.725536] State machine starting in initial state 'START_ANALYSIS' with userdata: 
    []
[INFO] [WallTime: 1437310815.728592] State machine transitioning 'START_ANALYSIS':'done'-->'NAVIGATE'
[INFO] [WallTime: 1437310815.729102] State machine starting in initial state 'GET_PLAN' with userdata: 
    []
[INFO] [WallTime: 1437310815.849148] choosing best entity from this list (name->weight):
    [('kitchentable', 0)]
[INFO] [WallTime: 1437310815.858006] choosing best entity from this list (name->weight):
    [('kitchen', 0)]
[INFO] [WallTime: 1437310815.947025] choosing best entity from this list (name->weight):
    [('kitchentable', 0)]
[INFO] [WallTime: 1437310815.967344] Goal handle = <actionlib.action_client.ClientGoalHandle instance at 0x7faeedcfc758>
[INFO] [WallTime: 1437310815.967859] 'Getting there!'
[INFO] [WallTime: 1437310815.970736] State machine transitioning 'GET_PLAN':'goal_ok'-->'EXECUTE_PLAN'
[INFO] [WallTime: 1437310827.982214] State machine terminating 'EXECUTE_PLAN':'succeeded':'arrived'
[INFO] [WallTime: 1437310827.982772] State machine transitioning 'NAVIGATE':'arrived'-->'STOP_ANALYSIS_SUCCEED'
[INFO] [WallTime: 1437310827.986522] 

Navigation summary:
Covered 2.39414091956 meters in 12.2578241825 seconds (0.195315325454) m/s avg.
Result = succeeded with 0 plans, 0 clears and 0 resets


[INFO] [WallTime: 1437310827.986906] State machine terminating 'STOP_ANALYSIS_SUCCEED':'done':'arrived'
[INFO] [WallTime: 1437310827.987153] State machine transitioning 'GOTO_ITEM':'arrived'-->'FIND_ITEM'
[INFO] [WallTime: 1437310827.998106] choosing best entity from this list (name->weight):
    [('kitchentable', 0)]
result_type =  pure_milk
[INFO] [WallTime: 1437310827.998459] Look at x: 0.0 y: 0.0 z: 0.769999980927 in frame /kitchentable
look at table, point_stamped =  header: 
  seq: 0
  stamp: 
    secs: 0
    nsecs: 0
  frame_id: /kitchentable
point: 
  x: 0.0
  y: 0.0
  z: 0.769999980927
entity_ids 1:  ['51b6534db31fe3398e5db9a1223cd7b3', '5aec037e78e44a13b5ac4d4d6871ab3f', '635e53e938f618ac03468fba796b22d8', '637c755ae41fcbcdf0370f28884ab131', '72176ba9602b22d313f4bcc4fec78bb0', '773c131d2f034ac8cde3c320506af486', '998549f4cee3049842157e5e31e55eee', 'cc3d04a33a6852010e5c28c793288af4', 'dd7382df3fa52894b88754b528db49b1']
id is NOT on top of object
ja, toegevoegd
id is on top of object
ja, toegevoegd
id is on top of object
ja, toegevoegd
id is on top of object
ja, toegevoegd
id is on top of object
ja, toegevoegd
id is NOT on top of object
ja, toegevoegd
id is on top of object
ja, toegevoegd
id is on top of object
ja, toegevoegd
id is on top of object
ja, toegevoegd
filtered_ids = ['51b6534db31fe3398e5db9a1223cd7b3', '5aec037e78e44a13b5ac4d4d6871ab3f', '635e53e938f618ac03468fba796b22d8', '637c755ae41fcbcdf0370f28884ab131', '72176ba9602b22d313f4bcc4fec78bb0', '773c131d2f034ac8cde3c320506af486', '998549f4cee3049842157e5e31e55eee', 'cc3d04a33a6852010e5c28c793288af4', 'dd7382df3fa52894b88754b528db49b1']
self.items_were_looking_for = ['papaya_milk', 'pure_milk']
I found the following items: ['', '', '', '', '', '', '', '', '']
[INFO] [WallTime: 1437310833.370039] State machine transitioning 'FIND_ITEM':'item_found'-->'PICK_UP_ITEM'
[INFO] [WallTime: 1437310833.370574] State machine starting in initial state 'PREPARE_GRASP' with userdata: 
    []
[INFO] [WallTime: 1437310833.373057] LockingDesignator(<robot_smach_states.util.designators.designator.ArmDesignator object at 0x7faeee2d3d10>) resolved to <robot_ski, but is *not locked* to it
[INFO] [WallTime: 1437310841.794086] State machine transitioning 'PREPARE_GRASP':'succeeded'-->'NAVIGATE_TO_GRAB'
[INFO] [WallTime: 1437310841.794668] State machine starting in initial state 'START_ANALYSIS' with userdata: 
    []
[INFO] [WallTime: 1437310841.797968] State machine transitioning 'START_ANALYSIS':'done'-->'NAVIGATE'
[INFO] [WallTime: 1437310841.798568] State machine starting in initial state 'GET_PLAN' with userdata: 
    []
[INFO] [WallTime: 1437310841.899071] LockingDesignator(<robot_smach_states.util.designators.designator.ArmDesignator object at 0x7faeee2d3d10>) resolved to <robot_ski, but is *not locked* to it
[INFO] [WallTime: 1437310841.899503] Navigating to grasp entity id:51b6534db31fe3398e5db9a1223cd7b3
[INFO] [WallTime: 1437310841.917389] Goal handle = <actionlib.action_client.ClientGoalHandle instance at 0x7faeedd0ef38>
[INFO] [WallTime: 1437310841.917826] 'I'm on my way!'
[INFO] [WallTime: 1437310841.920703] State machine transitioning 'GET_PLAN':'goal_ok'-->'EXECUTE_PLAN'
[INFO] [WallTime: 1437310842.922399] State machine terminating 'EXECUTE_PLAN':'succeeded':'arrived'
[INFO] [WallTime: 1437310842.922802] State machine transitioning 'NAVIGATE':'arrived'-->'STOP_ANALYSIS_SUCCEED'
[INFO] [WallTime: 1437310842.926501] 

Navigation summary:
Covered 0.0479727883563 meters in 1.12843108177 seconds (0.0425128207927) m/s avg.
Result = succeeded with 0 plans, 0 clears and 0 resets


[INFO] [WallTime: 1437310842.926809] State machine terminating 'STOP_ANALYSIS_SUCCEED':'done':'arrived'
[INFO] [WallTime: 1437310842.927134] State machine transitioning 'NAVIGATE_TO_GRAB':'arrived'-->'GRAB'
[INFO] [WallTime: 1437310842.927501] LockingDesignator(<robot_smach_states.util.designators.designator.ArmDesignator object at 0x7faeee2d3d10>) resolved to <robot_ski, but is *not locked* to it
[INFO] [WallTime: 1437310842.927696] PickUp!
[INFO] [WallTime: 1437310843.037572] x: 0.622993227353
y: -0.240207749096
z: 0.655036211014
[INFO] [WallTime: 1437310843.038069] Starting Pre-grasp
[ERROR] [WallTime: 1437310850.552059] grasp precompute goal failed: 
{'pz': 0.7050362110137938, 'roll': 0, 'pre_grasp': True, 'py': -0.24020774909641984, 'first_joint_pos_only': False, 'self': <robot_skills.arms.Arm object at 0x7faeee2c82d0>, 'frame_id': '/amigo/base_link', 'allowed_touch_objects': ['51b6534db31fe3398e5db9a1223cd7b3'], 'timeout': 120, 'pitch': 0, 'px': 0.6229932273532088, 'yaw': 0}
[INFO] [WallTime: 1437310850.552504] 'I am sorry but I cannot move my arm to the object position'
[ERROR] [WallTime: 1437310850.554919] Grasp failed
[INFO] [WallTime: 1437310850.558794] State machine terminating 'GRAB':'failed':'failed'
[INFO] [WallTime: 1437310850.559115] State machine transitioning 'PICK_UP_ITEM':'failed'-->'SELECT_ITEM'
asked items: ['egg_stars', 'pure_milk', 'lemon']
category items: ['apple', 'lemon', 'pear']
[INFO] [WallTime: 1437310850.559611] 'I will get your fruit now.'
[INFO] [WallTime: 1437310850.562822] State machine transitioning 'SELECT_ITEM':'selected'-->'GOTO_ITEM'
[INFO] [WallTime: 1437310850.563485] State machine starting in initial state 'START_ANALYSIS' with userdata: 
    []
[INFO] [WallTime: 1437310850.566531] State machine transitioning 'START_ANALYSIS':'done'-->'NAVIGATE'
[INFO] [WallTime: 1437310850.566965] State machine starting in initial state 'GET_PLAN' with userdata: 
    []
[INFO] [WallTime: 1437310850.680509] choosing best entity from this list (name->weight):
    [('kitchencounter', 0)]
[INFO] [WallTime: 1437310850.689724] choosing best entity from this list (name->weight):
    [('kitchen', 0)]
[INFO] [WallTime: 1437310850.742982] choosing best entity from this list (name->weight):
    [('kitchencounter', 0)]
[INFO] [WallTime: 1437310850.765049] Goal handle = <actionlib.action_client.ClientGoalHandle instance at 0x7faeedd0ebd8>
[INFO] [WallTime: 1437310850.765598] 'Getting there!'
[INFO] [WallTime: 1437310850.768370] State machine transitioning 'GET_PLAN':'goal_ok'-->'EXECUTE_PLAN'
^C[ERROR] [WallTime: 1437310867.355325] InvalidTransitionError: Attempted to return outcome 'None' from state 'EXECUTE_PLAN' of type '<robot_smach_states.navigation.navigation.executePlan object at 0x7faeeddb9650>' which only has registered outcomes: ('preempted', 'arrived', 'succeeded', 'blocked')
[ERROR] [WallTime: 1437310867.355793] InvalidUserCodeError: Could not execute state 'NAVIGATE' of type '<smach.state_machine.StateMachine object at 0x7faeeddb9550>': Traceback (most recent call last):
  File "/opt/ros/indigo/lib/python2.7/dist-packages/smach/state_machine.py", line 247, in _update_once
    self._remappings[self._current_label]))
  File "/opt/ros/indigo/lib/python2.7/dist-packages/smach/state_machine.py", line 359, in execute
    container_outcome = self._update_once()
  File "/opt/ros/indigo/lib/python2.7/dist-packages/smach/state_machine.py", line 266, in _update_once
    self._current_state.get_registered_outcomes()))
InvalidTransitionError: Attempted to return outcome 'None' from state 'EXECUTE_PLAN' of type '<robot_smach_states.navigation.navigation.executePlan object at 0x7faeeddb9650>' which only has registered outcomes: ('preempted', 'arrived', 'succeeded', 'blocked')

[ERROR] [WallTime: 1437310867.355978] State 'GOTO_ITEM' failed to execute.
[ERROR] [WallTime: 1437310867.356111] State 'PREP_BREAKFAST_CONTAINER' failed to execute.
