1. Make sure the speech files are updated. In the folder:
   $ roscd tue_knowledge/speech_recognition/restaurant/
   
   Update object.corpus (all food and drink names should be here without spaces). After updating
   upload the file here:
   http://www.speech.cs.cmu.edu/tools/lmtool-new.html

   The resulting lm and dic files must be copied into the files which are on the SVN

2. In the restaurant_2014.cpp file, there is some hardcoded knowledge. All the hardcoded 
   knowledge is defined in the function: initializeMappings().

   * confusion_map
     -------------
     Here you can specify which object names are similar for the speech recognition. If for
     example the robot often hears beer when you ask for peanuts you should add:
       confusion_map_["beer"] = "peanuts";
     Now assume the robot hears beer and you answer that this is not correct. If the robot
     the second time again hears beer, it changes it to peanuts. Example:
     AMIGO: which object?
     guide: peanuts [AMIGO misunderstands and hears beer]
     AMIGO: beer?
     guide: no
     AMIGO: which object?
     guide: peanuts [AMIGO misunderstands and hears beer again, confusion mapping changes
                     the answer]
     AMIGO: peanuts?
     guide: yes

     REMARK: food is often understood as two, therefore, the second time the robot hears two it
             is changed to food.

   * class_label_map
     ---------------
     Speech recognition uses files without spaces, the world model knows files with underscores
     instead of spaces. This must be compensated for. For example:
       class_label_map_["peanut_butter"] = "peanutbutter";
       class_label_map_["ice_tea"] = "icetea";
     IMPORTANT: firt the name as known in the world model, then the name as used for the speech!

   * shelf_one_objects, shelf_two_objects
     ------------------------------------
     The robot does not have to recognize all objects but only the objects from two categories.
     All objects at one location belong to one catergory, if this is NOT the case, add
     objects from two categories to BOTH mappings.
    
     If indeed all objects at one location belong to one category, add the first category
     objects to one mapping and the second category objects to the second mapping. For example:

     All snacks to the first map:
     shelf_one_objects_.clear();
     shelf_one_objects_.push_back("chocolates");
     shelf_one_objects_.push_back("chewing_gums");
     shelf_one_objects_.push_back("peanuts");

     And all drinks to the second map:
     shelf_two_objects_.clear();
     shelf_two_objects_.push_back("orange_juice");
     shelf_two_objects_.push_back("fruit_juice");
     shelf_two_objects_.push_back("ice_tea");
     shelf_two_objects_.push_back("coffee");
     shelf_two_objects_.push_back("beer");

3. Test and see if it all works!
