#!/usr/bin/env python
import rospy
import roslib; roslib.load_manifest('challenge_demo')
import std_msgs.msg as std_msgs
from pein_msgs.msg import ODM

pub = rospy.Publisher('/detected_objects', std_msgs.String)

def oduCB(data):
	objs = []
	for image in data.object_images:

		if len(image.object_evidence) > 0:
			obj = max(image.object_evidence, key=lambda h: h.probability)
			objs.append(obj.object_name)

			#string  object_name
			#string  category
			#float64 probability

	if len(objs) > 0:
		rospy.loginfo('found objects: %s', str(objs))
		msg = "|".join(objs)
		pub.publish(msg)
	else:
		rospy.loginfo('no objects found')

rospy.init_node("pub_objects_external_kinect", anonymous=True)

rospy.Subscriber("/external_kinect/odu_finder/output", ODM, oduCB)

rospy.spin()
