language:
  - cpp
  - python
python:
  - "2.7"
compiler:
  - gcc
env:
  - ROS_DISTRO=hydro
notifications:
  email: false

before_install:
  - export CI_SOURCE_PATH=$(pwd)
  - export REPOSITORY_NAME=${PWD##*/}
  - echo "Testing branch $TRAVIS_BRANCH of $REPOSITORY_NAME"

install:
  - export TUE_ENV=$ROS_DISTRO
  - source <(wget -O- https://raw.githubusercontent.com/tue-robotics/tue-env/master/installer/scripts/bootstrap)
  - tue-get install ros-${REPOSITORY_NAME}

before_script:
  - source ~/.tue/setup.bash # source ROS
  - cd ${TUE_SYSTEM_DIR}/src

  # Link the repo we are testing to the new workspace
  - rm -rf $REPOSITORY_NAME
  - ln -s $CI_SOURCE_PATH .
  - ls -l
  - cd .. # go to the catkin workspace

script:
  - catkin_make
  - catkin_make install   # installing the package
  - catkin_make tests     # build the tests
  - catkin_make run_tests # and run them
  - roscore >> /dev/null & #Obvisousle we need a roscore
  - rosrun tf_server tf_server >> /dev/null & #Robot keeps waiting for this
  - rostopic pub /mockbot/base_laser/scan sensor_msgs/LaserScan -f laser_door_open.yaml -l >> /dev/null & #Make it look that the door is open so we candrive in. Its a hack
  - rosrun challenge_manipulation manipulation.py mockbot
  - rosrun challenge_navigation challenge_navigation.py mockbot 
  - rosrun challenge_person_recognition person_recognition mockbot
  - rosrun challenge_rips rips.py mockbot
  - rosrun challenge_robonurse challenge_robonurse.py mockbot 
  - rosrun challenge_speech_recognition 1_direct_speech_recognition.py mockbot
  - rosrun challenge_speech_recognition 2_indirect_speech_recognition.py mockbot